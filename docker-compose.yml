# [Ultimate Smart Home Media Server with Docker and Ubuntu][1]
#
# [1]: https://www.smarthomebeginner.com/docker-home-media-server-2018-basic/
volumes:
    media:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /mnt/storage/benflix
services:
    plex:
        image: lscr.io/linuxserver/plex:latest
        container_name: plex
        network_mode: host
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - VERSION=docker
        volumes:
            - ./config/plex:/config
            - media:/media
        devices:
            - "/dev/dri:/dev/dri"
        restart: unless-stopped
    portainer:
        image: portainer/portainer-ce
        container_name: portainer
        restart: always
        command: -H unix:///var/run/docker.sock
        ports:
            - "9000:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./config/portainer/data:/data
            - ./config/shared:/shared
        environment:
            - TZ=${TZ}
    organizr:
        container_name: organizr
        restart: always
        image: organizr/organizr:latest
        volumes:
            - ./config/organizr:/config
            - ./config/shared:/shared
        ports:
            - "8080:80"
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - fmp="false"
    watchtower:
        container_name: watchtower
        restart: always
        image: containrrr/watchtower:latest
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: --schedule "0 0 4 * * *" --cleanup
    transmission:
        container_name: transmission-vpn
        image: haugene/transmission-openvpn:latest
        cap_add:
            - NET_ADMIN
        devices:
            - "/dev/net/tun"
        restart: always
        ports:
            - "9091:9091"
        dns:
            - 1.1.1.1
            - 1.0.0.1
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ./config/transmission-vpn/config:/config
            - ./config/transmission-vpn/data:/data
            - ./config/shared:/shared
            - media:/media
        logging:
            driver: "json-file"
            options:
                max-size: "500k"
                max-file: "10"
        secrets:
            - openvpn_creds
        environment:
            - OPENVPN_PROVIDER=PIA
            - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 --mute-replay-warnings --mssfix 1460
            - OPENVPN_CONFIG=ca_vancouver,panama,ca_montreal,ca_toronto
            - PEER_DNS=true
            - LOCAL_NETWORK=192.168.1.0/24
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - TRANSMISSION_DOWNLOAD_DIR=/media/torrents/completed
            - TRANSMISSION_INCOMPLETE_DIR=/media/torrents/incomplete
            - TRANSMISSION_WATCH_DIR=/media/torrents/watch
            - TRANSMISSION_WEB_UI=transmissionic
            - TRANSMISSION_PEER_PORT_RANDOM_ON_START=true
            - TRANSMISSION_PORT_FORWARDING_ENABLED=true
            - GLOBAL_APPLY_PERMISSIONS=false
    tailscale-radarr:
        image: tailscale/tailscale:latest
        container_name: ts-radarr
        hostname: radarr
        environment:
            - TS_AUTHKEY=${TS_AUTHKEY}
            - TS_STATE_DIR=/var/lib/tailscale
            - TS_SERVE_CONFIG=/config/serve.json
            - TS_USERSPACE=false
            - TS_ENABLE_HEALTH_CHECK=true
            - TS_LOCAL_ADDR_PORT=127.0.0.1:41234
            - TS_EXTRA_ARGS=--accept-dns=true
        volumes:
            - ./config/ts-radarr/config:/config
            - ./config/ts-radarr/state:/var/lib/tailscale
        devices:
            - /dev/net/tun:/dev/net/tun
        cap_add:
            - NET_ADMIN
            - SYS_MODULE
        ports:
            - "7878:7878"
        healthcheck:
            test: [ "CMD", "wget", "--spider", "-q", "http://127.0.0.1:41234/healthz" ]
            interval: 1m
            timeout: 10s
            retries: 3
            start_period: 10s
        restart: always
    radarr:
        image: linuxserver/radarr
        network_mode: service:tailscale-radarr
        container_name: app-radarr
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ./config/radarr:/config
            - ./config/shared:/shared
            - media:/media
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
        depends_on:
            tailscale-radarr:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "pgrep", "-f", "radarr"]
            interval: 1m
            timeout: 10s
            retries: 3
            start_period: 30s
        restart: always
    tailscale-sonarr:
        image: tailscale/tailscale:latest
        container_name: ts-sonarr
        hostname: sonarr
        environment:
            - TS_AUTHKEY=${TS_AUTHKEY}
            - TS_STATE_DIR=/var/lib/tailscale
            - TS_SERVE_CONFIG=/config/serve.json
            - TS_USERSPACE=false
            - TS_ENABLE_HEALTH_CHECK=true
            - TS_LOCAL_ADDR_PORT=127.0.0.1:41235
            - TS_EXTRA_ARGS=--accept-dns=true
        volumes:
            - ./config/ts-sonarr/config:/config
            - ./config/ts-sonarr/state:/var/lib/tailscale
        devices:
            - /dev/net/tun:/dev/net/tun
        cap_add:
            - NET_ADMIN
            - SYS_MODULE
        ports:
            - "8989:8989"
        healthcheck:
            test: [ "CMD", "wget", "--spider", "-q", "http://127.0.0.1:41235/healthz" ]
            interval: 1m
            timeout: 10s
            retries: 3
            start_period: 10s
        restart: always
    sonarr:
        image: linuxserver/sonarr
        network_mode: service:tailscale-sonarr
        container_name: app-sonarr
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ./config/sonarr:/config
            - ./config/shared:/shared
            - media:/media
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
        depends_on:
            tailscale-sonarr:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "pgrep", "-f", "sonarr"]
            interval: 1m
            timeout: 10s
            retries: 3
            start_period: 30s
        restart: always
    bazarr:
        image: linuxserver/bazarr
        container_name: bazarr
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ./config/bazarr:/config
            - ./config/shared:/shared
            - media:/media
        ports:
            - "6767:6767"
        restart: always
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
    flaresolverr:
        image: ghcr.io/flaresolverr/flaresolverr:latest
        container_name: flaresolverr
        environment:
            - LOG_LEVEL=${LOG_LEVEL:-info}
            - LOG_HTML=${LOG_HTML:-false}
            - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
        ports:
            - "8191:8191"
        restart: unless-stopped
    prowlarr:
        image: lscr.io/linuxserver/prowlarr:develop
        container_name: prowlarr
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
        volumes:
            - ./config/prowlarr:/config
        ports:
            - 9696:9696
        restart: unless-stopped
    ombi:
        image: linuxserver/ombi
        container_name: ombi
        volumes:
            - ./config/ombi:/config
            - ./config/shared:/shared
        ports:
            - "3579:3579"
        restart: always
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
    pihole:
        image: pihole/pihole:latest
        container_name: pihole
        hostname: shepard
        ports:
            - "53:53/tcp"
            - "53:53/udp"
            - "8081:80/tcp"
        # Never auto-update pihole to avoid network disruptions
        # See https://github.com/pi-hole/docker-pi-hole/#note-on-watchtower
        #     https://containrrr.dev/watchtower/container-selection/#full_exclude
        labels:
            - "com.centurylinklabs.watchtower.enable=false"
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - WEBPASSWORD_FILE=/run/secrets/pihole_webpassword
            - FTLCONF_LOCAL_IPV4=192.168.1.130
            - DNS1=1.1.1.1
            - DNS2=1.0.0.1
        # Must add --dns arg, otherwise pi-hole fails to start with
        # "DNS resolution is currently unavailable" message in the logs.
        # See https://github.com/pi-hole/docker-pi-hole/issues/342
        dns:
            - 127.0.0.1
            - 1.1.1.1
        volumes:
            - ./config/pihole/pihole:/etc/pihole
            - ./config/pihole/dnsmasq.d:/etc/pihole/dnsmasq.d
        secrets:
            - pihole_webpassword
        restart: unless-stopped
    swag:
        image: ghcr.io/linuxserver/swag
        container_name: swag
        cap_add:
            - NET_ADMIN
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - URL=bshelley.duckdns.org
            - SUBDOMAINS=wildcard
            - VALIDATION=duckdns
            - FILE__DUCKDNSTOKEN=/run/secrets/duckdns_token
        volumes:
            - ./config/swag:/config
        ports:
            - 443:443
            - 80:80
        secrets:
            - duckdns_token
        restart: unless-stopped
    duckdns:
        image: ghcr.io/linuxserver/duckdns
        container_name: duckdns
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - UMASK=022
            - TZ=${TZ}
            - SUBDOMAINS=bshelley,bensflix,benshelley
            - FILE__TOKEN=/run/secrets/duckdns_token
        secrets:
            - duckdns_token
        volumes:
            - ./config/duckdns:/config
        restart: unless-stopped

secrets:
    duckdns_token:
        file: ./config/secrets/duckdns_token
    openvpn_creds:
        file: ./config/secrets/openvpn_creds
    pihole_webpassword:
        file: ./config/secrets/pihole_webpassword
